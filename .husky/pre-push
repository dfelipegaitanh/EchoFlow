# Check for merge conflicts
echo "Checking for merge conflicts..."
if grep -r --exclude-dir=node_modules --exclude-dir=vendor "<<<<<<< HEAD" --include="*.js" --include="*.ts" --include="*.php" --include="*.json" .; then
  echo "❌ Error: Merge conflicts detected. Please resolve them before committing."
  exit 1
fi

# Check for large tracked files only (ignore untracked/ignored files)
echo "Checking for large files (tracked only)..."
large_files=$(git ls-files -z | xargs -0 -I{} sh -c 'f="{}"; if [ -f "$f" ]; then size=$(wc -c < "$f"); if [ "$size" -gt 1048576 ]; then echo "$f"; fi; fi')
if [ -n "$large_files" ]; then
  echo "❌ Error: Large tracked files detected (>1MB). Please remove them or add to .gitignore."
  echo "$large_files"
  exit 1
fi

# Run format command and provide error message if it fails
if [ -d "node_modules" ]; then
  echo "Running code formatting..."
  if ! npm run format; then
    echo "❌ Error: Code formatting failed. Please fix the formatting issues before committing."
    exit 1
  fi
else
  echo "Skipping code formatting: node_modules directory not found"
fi

# Run TypeScript type checking
if [ -d "node_modules" ] && [ -f "tsconfig.json" ]; then
  echo "Running TypeScript type checking..."
  if ! npx tsc --noEmit; then
    echo "❌ Error: TypeScript type checking failed. Please fix the type errors before committing."
    exit 1
  fi
else
  if [ ! -d "node_modules" ]; then
    echo "Skipping TypeScript type checking: node_modules directory not found"
  elif [ ! -f "tsconfig.json" ]; then
    echo "Skipping TypeScript type checking: tsconfig.json not found"
  fi
fi

# Run tests and provide error message if they fail
if [ -d "node_modules" ]; then
  echo "Running tests..."
  if ! npm test; then
    echo "❌ Error: Tests failed. Please fix the failing tests before committing."
    exit 1
  fi
else
  echo "Skipping tests: node_modules directory not found"
fi

# Check test coverage (if tests exist)
if [ -d "node_modules" ] && ([ -d "tests" ] || [ -d "__tests__" ] || [ -d "src/__tests__" ]); then
  echo "Checking test coverage..."
  if ! npm run test:coverage -- --coverageThreshold='{"global":{"statements":80,"branches":80,"functions":80,"lines":80}}'; then
    echo "❌ Error: Test coverage is below the threshold. Please add more tests."
    exit 1
  fi
elif [ ! -d "node_modules" ]; then
  echo "Skipping test coverage check: node_modules directory not found"
fi

# Run PHP tests with coverage (Composer script)
if [ -d "vendor" ] && command -v composer > /dev/null; then
  echo "Running PHP tests with coverage..."
  if ! composer test:coverage; then
    echo "❌ Error: PHP tests with coverage failed. Please fix the failing tests or coverage issues before committing."
    exit 1
  fi
else
  if [ ! -d "vendor" ]; then
    echo "Skipping PHP coverage: vendor directory not found"
  elif ! command -v composer > /dev/null; then
    echo "Skipping PHP coverage: composer not available"
  fi
fi

# Run PHP static analysis if PHPStan is available
if [ -d "vendor" ] && [ -f "vendor/bin/phpstan" ]; then
  echo "Running PHP static analysis..."
  changed_php_files=$(git status --porcelain | cut -c4- | grep -E '\.php$' || true)
  if [ -z "$changed_php_files" ]; then
    echo "No PHP files changed; skipping PHPStan."
  else
    if ! vendor/bin/phpstan analyse $changed_php_files --memory-limit 1G --configuration phpstan.neon; then
      echo "❌ Error: PHP static analysis failed. Please fix the issues before committing."
      exit 1
    fi
  fi
elif [ ! -d "vendor" ]; then
  echo "Skipping PHP static analysis: vendor directory not found"
fi

# Run PHP code quality checks if Rector is available
if [ -d "vendor" ] && [ -f "vendor/bin/rector" ]; then
  echo "Running PHP code quality checks..."
  if ! composer rector:dry-run; then
    echo "❌ Error: PHP code quality checks failed. Please fix the issues before committing."
    exit 1
  fi
elif [ ! -d "vendor" ]; then
  echo "Skipping PHP code quality checks: vendor directory not found"
fi

# Run PHP code formatting if Laravel Pint is available
if [ -d "vendor" ] && [ -f "vendor/bin/pint" ]; then
  echo "Running PHP code formatting..."
  if ! composer pint:test; then
    echo "❌ Error: PHP code formatting check failed. Please run 'composer pint' to fix the issues before committing."
    exit 1
  fi
elif [ ! -d "vendor" ]; then
  echo "Skipping PHP code formatting: vendor directory not found"
fi

# Check for security vulnerabilities in dependencies
echo "Checking for security vulnerabilities..."
if [ -d "node_modules" ] && command -v npm > /dev/null; then
  if ! npm audit --production --audit-level=high; then
    echo "⚠️ Warning: Security vulnerabilities detected in npm dependencies."
    # Not exiting with error as this might be too strict for some projects
  fi
else
  if [ ! -d "node_modules" ]; then
    echo "Skipping npm security check: node_modules directory not found"
  fi
fi

if [ -d "vendor" ] && command -v composer > /dev/null && [ -f "composer.lock" ]; then
  if ! composer audit --no-dev; then
    echo "⚠️ Warning: Security vulnerabilities detected in Composer dependencies."
    # Not exiting with error as this might be too strict for some projects
  fi
else
  if [ ! -d "vendor" ]; then
    echo "Skipping composer security check: vendor directory not found"
  fi
fi

echo "✅ Pre-commit checks passed successfully!"

